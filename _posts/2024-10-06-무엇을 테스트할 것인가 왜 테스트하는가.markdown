---
layout: post
title:  "무엇을 테스트할 것인가 왜 테스트하는가?"
date:   2024-10-06 00:00:00 +0900
categories: 
---
### 테스트 코드 부재로 인해 마주친 실무적인 문제  
내가 다니는 회사는 아직은 테스트 코드 작성을 요구하지 않는다. 그러나 다음과 같은 이유로 테스트 코드를 작성하지 않을 수는 없었다. 정확하게 말하자면 작성을 하지 않아서 개발이 더 어려웠다.

- 테스트 코드가 없기 때문에 요구사항의 변경으로 인한 일부 로직의 수정이 다른 로직에 영향을 미치는 것에 대해서 수동으로 평가해야했다.
- 나름 의존성을 잘 관리했다고 생각했지만 실제로 Mock 테스트 코드를 작성하다보니 의존성이 잘 분리되지 않는 부분이 드러났다.
- 현재 구현하고 있는 로직에 대해서는 스스로 잘 이해하지만 나중에 이 기능에 대해서 개발을 다시 하게 되었을 때 로직을 잘 이해하지 못했다. 이는 주석의 작성여부와는 별개로 테스트 코드가 없기 때문에 로직이 수행하는 작업이 정상 수행되는지에 대해서 이해할 수도 없었다. 따라서 로직의 변경을 두려워 하게 되었다. 이는 로직을 변경하기보다는 새로 작성하게끔 유도했고 더 큰 리소스 부하로 돌아왔다.

### Spring rest docs 에 대해  

[API 문서 자동화: Swagger와 Spring REST Docs의 특징과 장단점](https://sm-studymemo.tistory.com/139)  

다른 부서에서 restDocs를 사용하고 있었고 관련하여 조사를 했다. 테스트가 주목적은 아니지만 컨트롤러 테스트를 강제한다는 점에서 조사하였고 나의 결론은 다음과 같다.

> rest docs 로 컨트롤러의 테스트 코드를 작성하는 것은 분명 바람직하다. 하지만 꼭 필요한 테스트인가에 대해서는 의문이다. 현재 사용하는 swagger로도 Api 문제를 자동생성할 수 있고 컨트롤러에서의 로직이 따로 복잡하게 있지 않은 이상 중요도가 낮아보였다. 나는 보다 중요한 로직을 먼저 테스트 하고 API 완성도를 원할 때 Rest Docs를 고려해봐야겠다고 생각했다.

### 방법보다 목적과 대상을  
Junit 책을 읽다가 흥미가 없어서 계속 읽기가 어려웠다. 내면을 고찰하다가 다음과 같은 사실을 알게되었다.

- 세련된 기술이나 방법은 나중에 습득하면 된다. 처음엔 아무 생각없이 @SpringBootTest로 통합으로 시작해도 무방하다.
- 정말 중요한 것은 무엇을 왜 테스트 하는지이다. 이것은 책이나 어디서든 쉽게 알려주지 않는다. 
- 쉽게 배울 수 없다는 것은 specific 하지 않고 Abstract 하다는 것이다. 테스트 원칙이나 철학은 Abstract에 해당하고 Concrete, Specific은 실제 업무 환경에서 찾아야 한다.

### 무엇을 테스트 하는가?  


