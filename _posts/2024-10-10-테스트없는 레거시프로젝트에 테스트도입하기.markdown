---
layout: post
title:  "테스트없는 레거시프로젝트에 테스트 도입하기"
date:   2024-00-00 00:00:00 +0900
categories: 
---

### 배경

회사에서 내가 담당하는 프로젝트에 테스트 코드가 없었다. 대신에 로컬환경으로 서버를 돌리고 포스트맨으로 엔드포인트를 테스트 했다. 이 방법은 간단했고 테스트 케이스가 모두 머릿속에 있었기 때문에 충분히 가능했다. 그러나 요구하는 기능과 복잡성이 시간이 지남에 따라 점점 가중되었다. 이런 방식으로는 테스트를 지속할 수 없었다. 테스트 비용이 너무 높았기 때문이다. 그래서 자동화된 테스트를 고민하게 되었고 테스트에 대한 여러 영상과 자료를 찾아 보게 되었다. 그 때 찾아본 자료들은 대략 다음과 같다.

- [2024년 인프콘 후기 - #4 클린 스프링](https://velog.io/@joshuara7235/2024%EB%85%84-%EC%9D%B8%ED%94%84%EC%BD%98-%ED%9B%84%EA%B8%B0-4-%ED%81%B4%EB%A6%B0-%EC%8A%A4%ED%94%84%EB%A7%81)
- [단위 테스트의 가성비를 10초만에 판단하는 법](https://www.youtube.com/watch?v=qECd2q3USqA)
- [스프링캠프 2019 [Track 2 Session 3] : 무엇을 테스트할 것인가? 어떻게 테스트할 것인가? (권용근)](https://www.youtube.com/watch?v=YdtknE_yPk4)
- [지속 가능한 인수 테스트 주도 개발 #우아콘2023](https://www.youtube.com/watch?v=birVFRb2d-E)
- [[3월 우아한테크세미나] 우아한ATDD](https://www.youtube.com/watch?v=ITVpmjM4mUE)
- [Test Code Why? What? How?](https://kakaoentertainment-tech.tistory.com/78)


다양한 Scope의 테스트가 있고 어떤 테스트를 도입할 것인지에 대해서 고민이 되지만 우선 필요한 테스트를 도입하는 것이 좋겠다고 생각했다. 우선 기능을 구현하면서 단위테스트 또는 기능테스트가 필요했다. 그리고 사용자 유즈케이스 시나리오에 따라서 기능을 검증할 인수테스트가 필요했다. 단 UI는 포함하지 않고 E2E 영역만을 테스트 하려고 생각했다. 아래는 챗 지피티가 알려준 각 테스트의 차이다.


| **구분**         | **단위 테스트 (Unit Test)**                     | **기능 테스트 (Functional Test)**                        | **인수 테스트 (Acceptance Test)**                         |
|------------------|--------------------------------------------------|----------------------------------------------------------|-----------------------------------------------------------|
| **목적**         | 개별 메서드나 클래스의 동작을 검증                  | 특정 기능(API나 모듈)이 설계된 대로 동작하는지 검증         | 시스템이 사용자 요구사항을 충족하는지 종합적으로 검증       |
| **관점**         | 개발자 관점, 코드 수준에서 테스트                   | 개발자 관점, 기능 단위로 테스트                            | 사용자 또는 비즈니스 관점, 시스템 전체 테스트               |
| **테스트 범위**   | 단일 메서드, 클래스, 작은 단위의 모듈                | API, 서비스 등 개별 기능이나 모듈                           | 사용자 시나리오 기반의 전체 흐름(종단 간 테스트)             |
| **테스트 대상**   | 코드의 개별 요소                                  | 하나의 기능(예: API 엔드포인트, 서비스 로직)                | 전체 시스템, 여러 기능 간의 상호작용, UI와 데이터 흐름 등    |
| **사용 도구**    | JUnit, Mockito 등                                | MockMvc, RestAssured 등                                   | RestAssured, Selenium 등(전체 흐름을 테스트하는 도구)         |
| **테스트 속도**   | 매우 빠름                                         | 비교적 빠름                                               | 상대적으로 느림 (종단 간 테스트이기 때문에 더 복잡함)        |
| **의존성**       | 테스트 대상 클래스 외에는 의존하지 않음               | API나 모듈이 서로 어떻게 동작하는지 일부 의존성 있음         | 전체 시스템 의존 (데이터베이스, 외부 시스템 등 포함 가능)      |
| **실제 환경 반영** | 실제 환경을 반드시 반영하지 않음                    | 일부 실제 환경 반영 가능(Mock 사용 가능)                   | 실제 환경과 유사하게 테스트, 데이터베이스와 실제 네트워크 호출 가능 |
| **예시**         | 특정 계산 메서드가 두 숫자를 더하는지 검증             | API 엔드포인트가 올바르게 작동하고, 응답을 예상대로 반환하는지 검증 | 사용자가 로그인하고 상품을 장바구니에 추가한 후 결제까지 완료하는 시나리오 테스트 |


### 테스트 도입하기 : 테스트에 필요한 Application Properties로 분리하기
내가 맡은 프로젝트는 application.yml, application-local.yml, application-prod.yml, application-dev.yml 로 각 Stage 마다 설정파일을 구분하고 있다. application.yml은 기본으로 공통로드 되는 설정이며 application.yml에 Stage마다 spring.profiles.active={profileName}를 변경해서 다른 설정을 덮어 씌운다. 보통 Docker로 서버를 올리기 때문에 각 인스턴스의 docker-compose.yml에 해당 설정 값을 변경해서 사용한다. 단 Local 즉 수동으로 하는 테스트 환경에서는 -Dspring.profiles.active=local 로 시스템 속성을 지정했었다.

 테스트용 설정파일은 src/test/resources/에 위치시킨다. 기본적으로 @Spring

